// Importerar express-biblioteket för att skapa en router
const express = require('express');

// Skapar en ny router för att hantera /api/dishes-rutter
const router = express.Router();

// Importerar Mongoose-modellen för Dish (recept)
const Dish = require('../models/Dish');






// GET /api/dishes – Hämta alla rätter
router.get('/', async (req, res) => {
  console.log('GET /api/dishes Hämtar alla rätter');
  try {
    const dishes = await Dish.find(); // Hämtar alla rätter från databasen
    res.json(dishes); // Skickar tillbaka som JSON
  } catch (err) {
    console.error('Fel vid hämtning:', err);
    res.status(500).json({ message: 'Fel vid hämtning av rätter' });
  }
});






// GET /api/dishes/:name – Hämta en rätt med namn
router.get('/:name', async (req, res) => {
    console.log('GET /api/dishes/:name – Hämtar rätt med namn:', req.params.name);
    try {
      const dish = await Dish.findOne({
        name: new RegExp('^' + req.params.name + '$', 'i') // exakt namn, case-insensitive
      });
  
      if (!dish) {
        return res.status(404).json({ message: 'Rätten hittades inte' }); // Om inget hittas
      }
  
      res.json(dish); // Skickar rätt om den finns
    } catch (err) {
      console.error('Fel vid hämtning:', err);
      res.status(500).json({ message: 'Fel vid hämtning av rätt' });
    }
  });
  





// POST /api/dishes – Lägg till en ny rätt
router.post('/', async (req, res) => {
  console.log('POST /api/dishes – Lägger till ny rätt:', req.body);
  try {
    const newDish = new Dish(req.body); // Skapar en ny rätt med datan från användaren
    const savedDish = await newDish.save(); // Sparar till databasen
    res.status(201).json(savedDish); // Skickar tillbaka rätten med status 201 (Created)
  } catch (err) {
    if (err.code === 11000) {
      res.status(409).json({ message: 'Rätten finns redan (namnet måste vara unikt)' }); // Dubblett
    } else {
      console.error('Fel vid sparning:', err);
      res.status(500).json({ message: 'Fel vid skapande av rätt' });
    }
  }
});






// PUT /api/dishes/:id – Uppdatera en befintlig rätt
router.put('/:id', async (req, res) => {
  console.log('PUT /api/dishes/:id  Uppdaterar rätt med id:', req.params.id);
  try {
    const updatedDish = await Dish.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true } // returnera uppdaterad + kör validering
    );

    if (!updatedDish) {
      return res.status(404).json({ message: 'Rätten hittades inte för uppdatering' });
    }

    res.json(updatedDish); // Skickar tillbaka den uppdaterade rätten
  } catch (err) {
    if (err.code === 11000) {
      res.status(409).json({ message: 'En rätt med det namnet finns redan' });
    } else {
      console.error('Fel vid uppdatering:', err);
      res.status(500).json({ message: 'Fel vid uppdatering av rätt' });
    }
  }
});





// DELETE /api/dishes/:id – Ta bort en rätt
router.delete('/:id', async (req, res) => {
  console.log('DELETE /api/dishes/:id – Tar bort rätt med id:', req.params.id);
  try {
    const deletedDish = await Dish.findByIdAndDelete(req.params.id); // Tar bort rätten
    if (!deletedDish) {
      return res.status(404).json({ message: 'Rätten hittades inte för borttagning' });
    }

    res.json({ message: 'Rätten togs bort' }); // Skickar bekräftelse
  } catch (err) {
    console.error('Fel vid borttagning:', err);
    res.status(500).json({ message: 'Fel vid borttagning av rätt' });
  }
});

// Exporterar routern så att server.js kan använda den
module.exports = router;

